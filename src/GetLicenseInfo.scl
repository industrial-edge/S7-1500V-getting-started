FUNCTION_BLOCK "GetLicenseInfo"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_OUTPUT 
      LicenseInfo { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         stateNum { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         remainingTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : ULInt;
         stateText { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      END_STRUCT;
   END_VAR

   VAR 
      instReadRecord {InstructionName := 'RDREC'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : RDREC;
      statLicenseInfo { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         active { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         stateNum { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;
         remainingTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : ULInt;
         stateText { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : String;
      END_STRUCT;
      statPos { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statRecord { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..370] of Byte;
   END_VAR

   VAR_TEMP 
      tempRv : DInt;
   END_VAR


BEGIN
	
   // The function block provides a datarecord for the licensing state information, which is read by using the function “RDREC: Read data record”
   // Following the meaning of the State number (stateNum), more detailed can be found in the function manual
   // 1: Not connected to backend service: The application is started but there is no hardware or address configuration on it.
   // 2: Connected to backend service: The application is started but there is no hardware or address configuration on it.
   // 3: License granted
   // 4: In default grace period: <xyz> minutes to expire
   // 5: In extended grace period: <xyz> hours to expire
   // 6: Grace period has ended: Cannot enter RUN mode

   #instReadRecord(REQ    := true,
	             ID        := 50,
	             INDEX     := 102,
	             MLEN      := 0,
	             RECORD    := #statRecord);
	
	#statPos := 0;
	#tempRv := READ_LITTLE(src_array := #statRecord, dest_Variable => #statLicenseInfo.active, pos := #statPos);
	
	#statPos := 4;
	#tempRv := READ_LITTLE(src_array := #statRecord, dest_Variable => #statLicenseInfo.stateNum, pos := #statPos);
	
	#statPos := 8;
	#tempRv := READ_LITTLE(src_array := #statRecord, dest_Variable => #statLicenseInfo.remainingTime, pos := #statPos);
	
	Chars_TO_Strg(Chars  := #statRecord,
	              pChars := 16,
	              Cnt    := 255,
	              Strg   => #statLicenseInfo.stateText);
	
	#LicenseInfo := #statLicenseInfo;
END_FUNCTION_BLOCK
